// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hegel.proto

/*
Package hegel is a generated protocol buffer package.

It is generated from these files:
	hegel.proto

It has these top-level messages:
	GetRequest
	GetResponse
	SubscribeRequest
	SubscribeResponse
*/
package hegel

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRequest struct {
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetResponse struct {
	JSON string `protobuf:"bytes,1,opt,name=JSON" json:"JSON,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetJSON() string {
	if m != nil {
		return m.JSON
	}
	return ""
}

type SubscribeRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubscribeRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type SubscribeResponse struct {
	JSON string `protobuf:"bytes,1,opt,name=JSON" json:"JSON,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubscribeResponse) GetJSON() string {
	if m != nil {
		return m.JSON
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "hegel.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "hegel.GetResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "hegel.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "hegel.SubscribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hegel service

type HegelClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Hegel_SubscribeClient, error)
}

type hegelClient struct {
	cc *grpc.ClientConn
}

func NewHegelClient(cc *grpc.ClientConn) HegelClient {
	return &hegelClient{cc}
}

func (c *hegelClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/hegel.Hegel/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hegelClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Hegel_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hegel_serviceDesc.Streams[0], c.cc, "/hegel.Hegel/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &hegelSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hegel_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type hegelSubscribeClient struct {
	grpc.ClientStream
}

func (x *hegelSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hegel service

type HegelServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Subscribe(*SubscribeRequest, Hegel_SubscribeServer) error
}

func RegisterHegelServer(s *grpc.Server, srv HegelServer) {
	s.RegisterService(&_Hegel_serviceDesc, srv)
}

func _Hegel_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HegelServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hegel.Hegel/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HegelServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hegel_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HegelServer).Subscribe(m, &hegelSubscribeServer{stream})
}

type Hegel_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type hegelSubscribeServer struct {
	grpc.ServerStream
}

func (x *hegelSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Hegel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hegel.Hegel",
	HandlerType: (*HegelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Hegel_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Hegel_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hegel.proto",
}

func init() { proto.RegisterFile("hegel.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0x4d, 0x4f,
	0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x78, 0xb8, 0xb8, 0xdc,
	0x53, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0x14, 0xb9, 0xb8, 0xc1, 0xbc, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x21, 0x2e, 0x16, 0xaf, 0x60, 0x7f, 0x3f, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x49, 0x89, 0x4b, 0x20, 0xb8, 0x34, 0xa9, 0x38, 0xb9, 0x28,
	0x33, 0x29, 0x15, 0xaa, 0x4d, 0x88, 0x8f, 0x8b, 0xc9, 0xd3, 0x05, 0xaa, 0x8a, 0xc9, 0xd3, 0x45,
	0x49, 0x9d, 0x4b, 0x10, 0x49, 0x0d, 0x6e, 0xc3, 0x8c, 0xca, 0xb9, 0x58, 0x3d, 0x40, 0xce, 0x10,
	0xd2, 0xe1, 0x62, 0x76, 0x4f, 0x2d, 0x11, 0x12, 0xd4, 0x83, 0x38, 0x11, 0xe1, 0x24, 0x29, 0x21,
	0x64, 0x21, 0xa8, 0x51, 0x0e, 0x5c, 0x9c, 0x70, 0xf3, 0x85, 0xc4, 0xa1, 0x0a, 0xd0, 0x5d, 0x25,
	0x25, 0x81, 0x29, 0x01, 0xd1, 0x6f, 0xc0, 0x98, 0xc4, 0x06, 0x0e, 0x04, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x1a, 0x22, 0x9c, 0x73, 0x13, 0x01, 0x00, 0x00,
}
